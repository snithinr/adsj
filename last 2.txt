---------------------------------------------------------------------------------------------------------------------------------------------------
//14.PriorityQueue using max heap
import java.util.*;
public class PriorityQueueDemo<T extends Comparable<T>>{
 private PriorityQueue<T> queue;
 public PriorityQueueDemo(){
 queue=new PriorityQueue<>(Collections.reverseOrder());
 }
 public void enqueue(T element){
 queue.add(element);
 }
 public T dequeue(){
 return queue.poll();
 }
 public T peek(){
 return queue.peek();
 }
 public boolean isEmpty(){
 return queue.isEmpty();
 }
 public static void main(String[] args){
 PriorityQueueDemo<Integer> pq=new PriorityQueueDemo<>();
 pq.enqueue(5);
 pq.enqueue(7);
 pq.enqueue(1);
 while(!pq.isEmpty())
 System.out.println(pq.dequeue());
 }
}
---------------------------------------------------------------------------------------------------------------------
//15.HeapSort
import java.util.*;
public class HeapSort{
 public static void heap(List<Integer> list){
 int n=list.size();
 for(int i=n/2-1;i>=0;i--){
 heapify(list,n,i);
 }
 for(int i=n-1;i>=0;i--){
 Collections.swap(list,i,0);
 heapify(list,i,0);
 }
 }
 private static void heapify(List<Integer> list,int n,int i){
 int largest=i;
 int left=2*i+1;
 int right=2*i+2;
 if(left<n && list.get(left)>list.get(largest))
 largest=left;
 if(right<n && list.get(right)>list.get(largest))
 largest=right;
 if(largest!=i){
 Collections.swap(list,largest,i);
 heapify(list,n,largest);
 }
 }
 public static void main(String[] args){
 List<Integer> l=new ArrayList<>();
 l.add(5);
 l.add(2);
 l.add(4);
 l.add(8);
 System.out.println("Before Sorting:"+l);
 heap(l);
 System.out.println("After Sorting:"+l); 
 }
} 