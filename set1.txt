//1a.Iterators on arraylist and linkedlist
import java.util.*; 
public class Sample1{
 public static void main(String[] args){
 ArrayList<Integer> a=new ArrayList<>();
 a.add(2);
 a.add(3);
 a.add(4);
 Iterator itr=a.iterator();
 System.out.println("Using Iterator");
 while(itr.hasNext()){
 System.out.println(itr.next());
 }
LinkedList<Integer> a1=new LinkedList<>();
a1.add(2);
a1.add(3);
a1.add(4);
System.out.println("Using ListIterator");
ListIterator itr1=a1.listIterator();
System.out.println("Forward");
while(itr1.hasNext()){
 System.out.println(itr1.next());
}
System.out.println("Backward");
while(itr1.hasPrevious()){
 System.out.println(itr1.previous());
}


/////1b.Linear probing 


import java.util.*;
public class LinearProbing<T extends Comparable<T>>{
 private T[] list;
 private int currentsize=0;
 private int maxsize;
 
 public LinearProbing(T[] list){
 this.list=list;
 maxsize=list.length;
 for(int i=0;i<list.length;i++)
 list[i]=null;
 }
 
 public void insert(T ele){
 int i=hash(ele);
 if(currentsize==maxsize)
 System.out.println("Insertion not possible");
 else{
 while(list[i]!=null){
 i=(i+1)%maxsize;
 }
 list[i]=ele;
 currentsize++;
 }
 }
 public void delete(T ele){
if(search(ele)==false)
System.out.println("Element not found");
 int i=hash(ele);
int j=i;
while(list[j]!=null){
if(list[j].compareTo(ele)==0){
list[j]=null;
currentsize--;
break;
}
j=(j+1)%maxsize;
}
 }
 public boolean search(T ele){
 int i=hash(ele);
int j=i;
while(list[i]!=null){
if(list[i].compareTo(ele)==0)
return true;
i=(i+1)%maxsize;
if(j==i)
break;
 }
return false;
 }
 
 public int hash(T ele){
 int hashvalue=(ele.hashCode())%list.length;
if(hashvalue<0)
 hashvalue+=list.length;
return hashvalue;
 }
 public void display(){
 for(int i=0;i<list.length;i++)
 System.out.println(i+"-->"+list[i]);
 }
 public static void main(String[] args){
Integer[] arr=new Integer[10];
 LinearProbing<Integer> lp=new LinearProbing<>(arr);
lp.insert(5);
lp.insert(55);
lp.insert(68);
lp.insert(78);
lp.insert(89);
lp.insert(4);
lp.display();
System.out.println("55 exists:"+lp.search(55));
System.out.println("60 exists:"+lp.search(60));
lp.delete(4);
lp.delete(9);
lp.display();
 }
}



